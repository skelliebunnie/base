/*
	COLORS
*/
$colorNames: map-keys($palette);
$colors: map-values($palette);

@for $n from 1 through length($colorNames) {
	$name: nth($colorNames, $n);
	$val: nth($colors, $n);
	.bg-#{$name} {
		background-color: $val;
		color: getContrast($val);
	}

	.border-#{$name} { border: 1px solid $val; }
	.text-#{$name} { color: $val; }
}

.bg-dark {
	background-color: getVal('color-dark', $defaults);
	color: getContrast(getVal('color-dark', $defaults));
}
.bg-light {
	background-color: getVal('color-light', $defaults);
	color: getContrast(getVal('color-light', $defaults));
}

.border-dark { border-color: getVal('color-dark', $defaults); }
.border-light { border-color: getVal('color-light', $defaults); }

.text-dark { color: getVal('color-dark', $defaults); }
.text-light { color: getVal('color-light', $defaults); }

/*
	TYPOGRAPHY & ALIGNMENT
*/
$text-positions: ('left', 'center', 'right');
$border-sides: ('top', 'right', 'bottom', 'left');
$border-corners: ('top-left', 'top-right', 'bottom-right', 'bottom-left');
$other: ('around', 'x', 'y');

$pad: map-get($defaults, 'padding');
$padding-sizes: (
	'xs': $pad * 0.5,
	'sm': $pad * 0.8,
	'md': $pad,
	'lg': $pad * 1.5,
	'xl': $pad * 2
);

$margin: map-get($defaults, 'margin');
$margin-sizes: (
	'xs': $margin * 0.5,
	'sm': $margin * 0.8,
	'md': $margin,
	'lg': $margin * 1.5,
	'xl': $margin * 2
);

$justify: ('start', 'center', 'end', 'space-between', 'space-around', 'space-evenly');
$align: ('stretch','center', 'start', 'end');

.text {
	@each $position in $text-positions {
		&-#{$position} { text-align: unquote($position); }
	}
}

.justify {
	@each $type in $justify {
		&-#{$type} { justify-content: unquote($type); }
	}
}

.align {
	@each $type in $align {
		&-#{$type} { align-items: unquote($type); }
	}
}

.no {
	&-pad { padding: 0; }
	&-margin { margin: 0; }
}

.row.col-no-pad > .col { padding: 0; }
.row.col-no-margin > .col { margin: 0; }

.pad {
	@each $position in $border-sides {
		&-#{$position} {
			padding-#{$position}: $pad;
		}
	}

	@each $position in $other {
		&-#{$position} {
			@if $position == 'around' { 
				padding: $pad; 
			}
			@if $position == 'x' { 
				padding-left: $pad;
				padding-right: $pad;
			}
			@if $position == 'y' {
				padding-top: $pad;
				padding-bottom: $pad;
			}
		}
	}

	@each $size,$pad in $padding-sizes {
		@each $position in $border-sides {
			&-#{$size}-#{$position} {
				padding-#{$position}: $pad;
			}
		}

		@each $position in $other {
			&-#{$size}-#{$position} {
				@if $position == 'top' { padding-top: $pad; }
				@if $position == 'left' { padding-left: $pad; }
				@if $position == 'bottom' { padding-bottom: $pad; }
				@if $position == 'right' { padding-right: $pad; }

				@if $position == 'around' { 
					padding: $pad; 
				}
				@if $position == 'x' { 
					padding-left: $pad;
					padding-right: $pad;
				}
				@if $position == 'y' {
					padding-top: $pad;
					padding-bottom: $pad;
				}
			}
		}
	}
}

.margin {
	@each $position in $border-sides {
		&-#{$position} {
			padding-#{$position}: $margin;
		}
	}

	@each $position in $other {
		&-#{$position} {
			@if $position == 'around' { padding: $margin; }
			@if $position == 'x' { 
				padding-left: $margin;
				padding-right: $margin;
			}
			@if $position == 'y' {
				padding-top: $margin;
				padding-bottom: $margin;
			}
		}
	}

	@each $size,$margin in $margin-sizes {
		@each $position in $border-sides {
			&-#{$size}-#{$position} {
				margin: $margin;
			}
		}
		@each $position in $other {
			&-#{$size}-#{$position} {
				@if $position == 'around' { 
					margin: $margin; 
				}
				@if $position == 'x' { 
					margin-left: $margin;
					margin-right: $margin;
				}
				@if $position == 'y' {
					margin-top: $margin;
					margin-bottom: $margin;
				}
			}
		}
	}
}