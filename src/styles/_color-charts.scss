@import 'settings';
@import 'global';

%colors {
	$colors: map-values($palette);

	& p {
		position: relative;
		flex: 1 0 (100% / 7);
		padding: 0;
		margin: 0;
		line-height: 1rem;
		font-size: 1rem;
		min-height: 3rem;
		display: flex;
		flex-flow: column nowrap;
		justify-content: center;
		align-items: center;
	}
}
$clr: 'primary';
$h: 'quad';

#colors-default {
	@include palette($coreColors, $color: "#{$clr}", $harmony: "#{$h}", $rangeType: 'default');
	@extend %colors;
	$n: 1;
	@each $name,$color in $palette {
		p:nth-child(#{$n}) {
			background-color: $color;
			color: getContrast($color);

			@if endsWith($name, '400') and map-has-key($coreColors, str-slice($name,1, (str-length($name) - 4))) {
				border: 2px solid black;
			}

			@if map-has-key($coreColors, str-slice($name, 1, (str-length($name) - 4))) {
				&:after {
					content: "#{$name}";
				}
			} @else {
				@if endsWith($name, '100') {
					&:before {
						text-align: center;
						content: "FROM HARMONY FUNCTION";
						position: relative;
						display: block;
						width: 100%;
						font-weight: bold;
						margin-bottom: 0.25rem;
					}
					&:after {
						text-align: center;
						content: "#{$name}";
						display: block;
						width: 100%;
						position: relative;
					}
				} @else {
					&:after {
						content: "#{$name}";
					}
				}
			}

		}

		$n: $n + 1;
	}
}

#colors-adaptive {
	@include palette($coreColors, $color: "#{$clr}", $harmony: "#{$h}", $rangeType: 'adaptive');
	@extend %colors;
	$n: 1;
	@each $name,$color in $palette {
		p:nth-child(#{$n}) {
			background-color: $color;
			color: getContrast($color);
			
			@if hasValue($coreColors, $color) and map-has-key($coreColors, str-slice($name,1, (str-length($name) - 4))) {
				border: 2px solid black;
			}

			@if map-has-key($coreColors, str-slice($name, 1, (str-length($name) - 4))) {
				&:after {
					content: "#{$name}";
				}
			} @else {
				@if endsWith($name, '100') {
					&:before {
						text-align: center;
						content: "FROM HARMONY FUNCTION";
						position: relative;
						display: block;
						width: 100%;
						font-weight: bold;
						margin-bottom: 0.25rem;
					}
					&:after {
						text-align: center;
						content: "#{$name}";
						display: block;
						width: 100%;
						position: relative;
					}
				} @else {
					&:after {
						content: "#{$name}";
					}
				}
			}
		}
		$n: $n + 1;
	}
}

%colors-400 {
	$colors: map-values($palette);
	p {
		padding: 0;
		margin: 0;
		min-height: 3rem;
		text-align: center;
		display: flex;
		flex-flow: column nowrap;
		justify-content: center;
		align-items: center;

		&:after {
			line-height: 1rem;
			font-size: 1rem;
		}
	}
}

$clr400: 'primary';
#analogous-400 {
	$clr400: 'primary';
	@include palette($coreColors, $color: $clr400, $harmony: "analogous", $accent: true);
	@extend %colors-400;
	$n: 1;
	@each $name,$color in $palette {
		@if endsWith($name,'400') {
			p:nth-child(#{$n}) {
				background-color: $color;
				color: getContrast($color);
			}

			p:nth-child(#{$n}):after { content: "#{$name}"; }
			$n: $n + 1;
		}
	}
}

#compound-400 {
	$clr400: 'primary';
	@include palette($coreColors, $color: $clr400, $harmony: "compound", $accent: true);
	@extend %colors-400;
	$n: 1;
	@each $name,$color in $palette {
		@if endsWith($name,'400') {
			p:nth-child(#{$n}) {
				background-color: $color;
				color: getContrast($color);
			}

			p:nth-child(#{$n}):after { content: "#{$name}"; }
			$n: $n + 1;
		}
	}
}

#tetrad-400 {
	$clr400: 'primary';
	@include palette($coreColors, $color: $clr400, $harmony: "tetrad");
	@extend %colors-400;
	$n: 1;
	@each $name,$color in $palette {
		@if endsWith($name,'400') {
			p:nth-child(#{$n}) {
				background-color: $color;
				color: getContrast($color);
			}

			p:nth-child(#{$n}):after { content: "#{$name}"; }
			$n: $n + 1;
		}
	}
}

#quadratic-400 {
	$clr400: 'primary';
	@include palette($coreColors, $color: $clr400, $harmony: "quadratic");
	@extend %colors-400;
	$n: 1;
	@each $name,$color in $palette {
		@if endsWith($name,'400') {
			p:nth-child(#{$n}) {
				background-color: $color;
				color: getContrast($color);
			}

			p:nth-child(#{$n}):after { content: "#{$name}"; }
			$n: $n + 1;
		}
	}
}

#triad-400 {
	$clr400: 'primary';
	@include palette($coreColors, $color: $clr400, $harmony: "triad", $accent: true);
	@extend %colors-400;
	$n: 1;
	@each $name,$color in $palette {
		@if endsWith($name,'400') {
			p:nth-child(#{$n}) {
				background-color: $color;
				color: getContrast($color);
			}

			p:nth-child(#{$n}):after { content: "#{$name}"; }
			$n: $n + 1;
		}
	}
}

#split-400 {
	$clr400: 'primary';
	@include palette($coreColors, $color: $clr400, $harmony: "split", $accent: true);
	@extend %colors-400;
	$n: 1;
	@each $name,$color in $palette {
		@if endsWith($name,'400') {
			p:nth-child(#{$n}) {
				background-color: $color;
				color: getContrast($color);
			}

			p:nth-child(#{$n}):after { content: "#{$name}"; }
			$n: $n + 1;
		}
	}
}